###########################################
#
#  Master B8
#
# Use your newly developed mind control
# device to catch fish. With the limited
# control time available eat smaller fish,
# making the largest possible catch.
#
###########################################

:alias player_x vd
:alias player_y vc
:alias player_weight vb
:alias player_facing va

:alias timer_ticks v9
:alias timer_seconds v8
:alias wave_counter v7

:const PLAYFIELD_X_MIN 8
:const PLAYFIELD_X_MAX 114
:const PLAYFIELD_Y_MIN 8
:const PLAYFIELD_Y_MAX 57

:const TICK_DURATION 3
:const TIMER_POSITION 68

:const HOOK_POSITION 60 # 8 pixel wide sprite drawn centered

: main
  hires
  
#: draw_play_field
  plane 3
  i := seaweed # unrolling the seaweed from the loop to minise instructions executed while drawing the playfield, this has a visible impact on slow emulator speeds.
  v0 := 48 # fill from the bottom of the screen
  v1 := 128 # fill from the right side of the screen (this gives a more pleasing fill imo)
  loop
    v1 -= 16
    sprite v1 v0 0
  if v1 != 0 then again

  plane 2
  i := fill
  loop
    v0 -= 16
    v1 := 128
    loop
      v1 -= 16
      sprite v1 v0 0
    if v1 != 0 then again
  if v0 != 0 then again

  v1 := 0
  plane 1
  i := wave1
  loop
    sprite v1 v0 0
    v1 += 24
  if v1 != 120 then again

  i := wave3
  sprite v1 v0 7

  i := wave2
  v1 := 12
  loop
    sprite v1 v0 0
    v1 += 24
  if v1 != 132 then again

  wave_counter := 2
  draw_hook
#return

: restart
#: spawn_player
  # spawn the player somewhere in the range {[30, 94), [16, 48)}
  player_x := random 0b111111
  player_x += 30
  player_y := random 0b11111
  player_y += 16

  player_facing := random 0b1
  draw_player
#return

#: init_timer
  timer_ticks := 0
  timer_seconds := 30
  i := timer_digits
  bcd timer_seconds
  draw_timer
#return


: game_loop
  vf := delay
  if vf != 0 then jump game_loop
  vf := TICK_DURATION
  delay := vf

  v0 := TICK_DURATION
  update_timer

  if timer_seconds == 0 then jump time_out

#: handle_input
  v0 := 0 # delta_x
  v1 := 0 # delta_y
  vf := OCTO_KEY_W
  if vf key then v1 -= 1
  vf := OCTO_KEY_S
  if vf key then v1 += 1
  vf := OCTO_KEY_A
  if vf key then v0 -= 1
  vf := OCTO_KEY_D
  if vf key then v0 += 1
#return

#: update_player
  vf := v0
  vf |= v1

  if vf != 0 begin # player is moving
    if v0 == 1 begin
      if player_x == PLAYFIELD_X_MAX then v0 := 0
    end

    if v0 == -1 begin
      if player_x == PLAYFIELD_X_MIN then v0 := 0
    end

    if v1 == 1 begin
      if player_y == PLAYFIELD_Y_MAX then v1 := 0
    end

    if v1 == -1 begin
      if player_y == PLAYFIELD_Y_MIN then v1 := 0
    end

    draw_player # clear the sprite before updating the position

    if v0 != 0 then player_facing := v0

    player_x += v0
    player_y += v1
    draw_player
  end
#return

#: update_world
  #if toggle_hook then draw_hook
#return

  #if player_dead == 1 then jump dead_dead
jump game_loop

##############
# End States #
##############
: time_out
  draw_player
  vf := key #leave the time visible to give the player feedback why the game ended
  draw_timer
  jump restart

: dead_dead
  draw_player
  draw_timer
  vf := key #hide the timer, not relevant in this death state
  jump restart

############
# Routines #
############
: update_timer # uses v0 as the time elapsed
  timer_ticks += v0
  if timer_ticks >= 60 begin
    timer_ticks -= 60
    timer_seconds -= 1

    draw_timer
    i := timer_digits
    bcd timer_seconds
    draw_timer
  end
return

: draw_timer
  plane 2
  i := timer_digits
  load v2
  i := hex v1
  v0 := TIMER_POSITION
  v1 := 0
  sprite v0 v1 5
  i := hex v2
  v0 += 4
  sprite v0 v1 5
return

: draw_player
  plane 3
  i := fish_left
  if player_facing == 1 then i := fish_right
  sprite player_x player_y 4
return

: draw_hook
  plane 3
  i := hook
  v1 := HOOK_POSITION
  sprite v1 wave_counter 12
return

###########
# Sprites #
###########
: fish_right
0x00 0x08 0x00 0x00
0xB8 0xF4 0xFC 0xB8

: fish_left
0x00 0x40 0x00 0x00
0x74 0xBC 0xFC 0x74

: hook
0x04 0x04 0x08 0x08 0x00 0x00 0x3C 0x18
0x00 0x00 0x00 0x00
0x04 0x04 0x08 0x08 0x18 0x3C 0x00 0x00
0x10 0x20 0x24 0x18

: fill
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
: wave1
0xFF 0xF0 0xFF 0xF0 0xFF 0xF0 0xFF 0xF0
0xFF 0xF0 0xFF 0xF0 0x81 0xF0 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
: wave2
0xFF 0xF0 0xFF 0xF0 0xFF 0xF0 0xFF 0xF0
0xFF 0xF0 0xFF 0xF0 0xFF 0xF0 0x7E 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
: wave3
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0x81
: seaweed
0x00 0x00 0x00 0x80 0x40 0x04 0x08 0x00
0x02 0x20 0x00 0x00 0x01 0x00 0x10 0x01
0x40 0x12 0x00 0x00 0x20 0x00 0x00 0x20
0x02 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0xFF 0x7F 0xDF 0xF9 0xFB 0x2D 0xB3 0xAD
0xDB 0xCE 0xDD 0x9E 0xEC 0xDA 0x4D 0x9B
0x4D 0x59 0xAE 0xD9 0x9E 0xCD 0xAD 0xCD
0xA8 0xDC 0x89 0x09 0x00 0x00 0x00 0x00

########
# Data #
########
: timer_digits
0x00 0x00 0x00