# Chip8 is a virtual machine designed in 1977 for programming video games.
# Octo is a high level assembler, disassembler and simulator for Chip8.
# Click 'Run' and then press ASWD to move the sprite around the screen.
# Click the Octo logo for source, documentation and examples.

:alias px v1 # X is down axis
:alias py v2 # Y is right axis
:alias dv v3

: main
  px := random 0b0011111
  py := random 0b0001111
  #:call draw_ship
	:breakpoint immediate
	i := ship_e_6
	sprite px py 8

  loop
    vf := 3
    delay := vf
    # erase the player, update its position and then redraw:
    #:call draw_ship
    #v0 := OCTO_KEY_W if v0 key begin px += -1 dv := 0 end
    #v0 := OCTO_KEY_S if v0 key begin px +=  1 dv := 1 end
    #v0 := OCTO_KEY_A if v0 key begin py +=  1 dv := 2 end
    #v0 := OCTO_KEY_D if v0 key begin py += -1 dv := 4 end
    #:call draw_ship
		i := ship_e_se_6
		sprite px py 8
		#py += -1
		#px += -1
		

    # lock the framerate of this program via the delay timer:
    loop
      vf := delay
      if vf != 0 then
    again
  again
	
: draw_ship
	i := ship_n_8
  vd >>= dv # test ship facing
	if vf == 1 begin
	  i := ship_s_8
		jump do_draw
	end
	vd >>= vd
	if vf == 1 begin
	  i := ship_w_8
		jump do_draw
	end
	vd >>= vd
	if vf == 1 then i := ship_e_8
	: do_draw
	sprite px py 8
return

# NOTE: directions defined with 90° rotation. N = up = KEY_2, E = right = KEY_6, S = down = KEY_8, W = left = KEY_4

# ship facing directions
# 8x8 pixels (unused?)
: ship_n_8
  0x07 0x1E 0x7C 0xD8 0xD8 0x7C 0x1E 0x07
: ship_e_8
  0x18 0x3C 0x24 0x7E 0x7E 0xE7 0xC3 0x81
: ship_s_8
	0xE0 0x78 0x3E 0x1B 0x1B 0x3E 0x78 0xE0
: ship_w_8
  0x81 0xC3 0xE7 0x7E 0x7E 0x24 0x3C 0x18

# 6x6 pixels
# NOTE: All sprites are defined as 8x8 blits to allow the masks to be applied over the current position to move the sprite in the correct direction.
# TODO: Reorder segments to share bytes where possible (e.g. leading/trailing null bytes)
: ship_n_6
	0x00 0x1C 0x3E 0x68 0x68 0x3E 0x1C 0x00
: ship_e_6
	0x00 0x18 0x3C 0x66 0x7E 0x66 0x24 0x00
: ship_s_6
	0x00 0x38 0x7C 0x16 0x16 0x7C 0x38 0x00
: ship_w_6
	0x00 0x24 0x66 0x7E 0x66 0x3C 0x18 0x00
: ship_ne_6
	0x00 0x3C 0x6E 0x5A 0x70 0x60 0x30 0x00
: ship_nw_6
	0x00 0x30 0x60 0x70 0x5A 0x6E 0x3C 0x00
: ship_se_6
	0x00 0x3C 0x76 0x5A 0x0E 0x06 0x0C 0x00
: ship_sw_6
	0x00 0x0C 0x06 0x0E 0x5A 0x76 0x3C 0x00

# ship moving masks - positioned in the appropriate direction of the 8x8 blit/subcanvas. Meaning increment position AFTER drawing the mask
: ship_w_w_6
	0x00 0x24 0x42 0x18 0x18 0x5A 0x24 0x18
: ship_n_n_6
	0x00 0x24 0x42 0xB8 0xB8 0x42 0x24 0x00
: ship_e_e_6
	0x18 0x24 0x5A 0x18 0x18 0x42 0x24 0x00
: ship_s_s_6
	0x00 0x24 0x42 0x1D 0x1D 0x42 0x24 0x00
: ship_ne_ne_6
  0x78 0xE0 0xDA 0xBA 0xB0 0x00 0x30 0x00
: ship_nw_nw_6
	0x00 0x30 0x00 0xB0 0xBA 0xDA 0xE0 0x78
: ship_se_se_6
	0x1E 0x07 0x5B 0x5D 0x0D 0x00 0x0C 0x00
: ship_sw_sw_6
	0x00 0x0C 0x00 0x0D 0x5D 0x5B 0x07 0x1E

# turning sprite masks
# 90° rotations
: ship_n_e_6
	0x00 0x06 0x00 0x0E 0x16 0x5A 0x5C 0x00
: ship_n_w_6
	0x00 0x5C 0x5A 0x16 0x0E 0x00 0x06 0x00
: ship_s_e_6
	0x00 0x60 0x00 0x70 0x68 0x5A 0x3A 0x00
: ship_s_w_6
  0x00 0x3A 0x5A 0x68 0x70 0x00 0x60 0x00
: ship_ne_nw_6
	0x00 0x0C 0x0E 0x2A 0x2A 0x0E 0x0C 0x00
: ship_ne_se_6
	0x00 0x00 0x18 0x00 0x7E 0x66 0x3C 0x00
: ship_nw_sw_6
	0x00 0x3C 0x66 0x7E 0x00 0x18 0x00 0x00
: ship_se_sw_6
  0x00 0x30 0x70 0x54 0x54 0x70 0x30 0x00
# 45° rotations
: ship_n_ne_6
	0x00 0x20 0x50 0x32 0x18 0x5E 0x2C 0x00
: ship_n_nw_6
	0x00 0x2C 0x5E 0x18 0x32 0x50 0x20 0x00
: ship_e_ne_6
	0x00 0x24 0x52 0x3C 0x0E 0x06 0x14 0x00
: ship_e_se_6
	0x00 0x24 0x4A 0x3C 0x70 0x60 0x28 0x00
: ship_s_se_6
: ship_s_sw_6
: ship_w_sw_6
: ship_w_nw_6

# reversing direction sprite masks
: ship_n_s_6
	0x00 0x24 0x42 0x7E 0x7E 0x42 0x24 0x00
: ship_e_w_6
	0x00 0x3C 0x5A 0x18 0x18 0x5A 0x3C 0x00
: ship_ne_sw_6
	0x00 0x30 0x68 0x54 0x2A 0x16 0x0C 0x00
: ship_nw_se_6
  0x00 0x0C 0x16 0x2A 0x54 0x68 0x30 0x00

