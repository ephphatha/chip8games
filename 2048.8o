###########################################
#
#  0x800
#
# A Chip8 implementation of the 2048 tile
#  sliding game
#
###########################################

# The high bit of the direction is used by move_tiles to determine whether to reverse the order of bytes (so that the
#  code can be used to resolve each movement direction).
# 0_ -> tile set was loaded left to right
# 1_ -> tile set was loaded right to left and needs to be reversed before/after processing
# The low bit is used to determine if we're loading a row or a column.
# _0 -> Loading a row
# _1 -> Loading a column

:alias DIRECTION v0
:const FLAG_DIR_REVERSED 0b10
:const FLAG_DIR_COLUMN   0b01
:const DIR_RIGHT 0b10 # reversed row
:const DIR_LEFT  0b00 # normal row
:const DIR_UP    0b11 #  reversed col
:const DIR_DOWN  0b01 #  normal col

:alias GAME_STATE vc
:const VICTORY 1

:alias SPAWNED_TILE_INDEX vd
:const EMPTY_TILE 0xFF
:const TRUE 1
:const FALSE 0

# Gets the two least significant bits from _source and copies them to _dest (leaving source unmodified)
:macro get_crumb _dest _source { # In: _source; Out: _dest
	_dest := 0b11
	_dest &= _source
}

# Shifts _dest right by two bits.
:macro shift_crumb _dest source { # In: source; Out: _dest
	:assert "Cannot shift into the carry register, the result will be clobbered" { _dest != vf }
	# the first two lines of this macro could be replaced by _dest >>= _source if running on a CHIP8 compliant emulator.
	#  Buggy S-CHIP emulators ignore the rhs when shifting so to be safe we explicitly copy.
	_dest := source
	_dest >>= _dest
	_dest >>= _dest
}

:macro spawn_tile { # Out: SPAWNED_TILE_INDEX; Clobbers: v0-2, vf, i
	:assert "This macro is dummy thicc and should be replaced by a callable function if used more than once" { CALLS == 0 }
	# This procedure jumps to the end state so to save leaving garbage on the call stack it's been implemented as a macro.
	# If it ever needs to be converted to a subroutine it would be good to revisit the way the end state is triggered.
	v2 := 0
	:alias NUM_EMPTIES v1
	NUM_EMPTIES := 0

	loop
		i := board_data
		i += v2
		load v0

		if v0 != EMPTY_TILE then jump spawn_next

		# found an empty tile, add the address to the list of empties
		i := empty_indexes
		i += NUM_EMPTIES
		v0 := v2
		save v0
		NUM_EMPTIES += 1

		: spawn_next
		v2 += 1
		if v2 != 16 then
	again

	# NUM_EMPTIES is now the number of empty tiles and empty_indexes contains the indexes
	# If there are no empty spaces then the player has lost and needs to start again
	if NUM_EMPTIES == 0 then jump game_end

	# if there's only one tile then we can skip picking a random spot
	if NUM_EMPTIES == 1 then jump single_candidate

	# Otherwise NUM_EMPTIES is a value from 2 up to a max of 16 (but likely something far less)
	#  and we need to find a random index in empty_indexes to fill with a new tile

	# take shortcuts if NUM_EMPTIES is a power of 2
	if NUM_EMPTIES == 16 then jump rand_16

	if NUM_EMPTIES == 8 then jump rand_8

	if NUM_EMPTIES == 4 then jump rand_4

	if NUM_EMPTIES == 2 then jump rand_2

	# else NUM_EMPTIES is 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15
	# because I can't be bothered thinking about this more, just copy values from the start of the list to fill it up to 16 entries
	#  this does mean that tiles will be more likely to spawn in row 0 than row 3 and within each row slightly more likely to spawn in col 0 than col 3
	v2 := 0
	loop
		i := empty_indexes
		i += v2
		load v0
		i := empty_indexes
		i += NUM_EMPTIES
		save v0

		v2 += 1
		NUM_EMPTIES += 1
		if NUM_EMPTIES != 16 then
	again

	# we now have 16 choices, so fall through to the rand_16 case
	: rand_16
	v0 := random 0b1111
	jump load_candidate

	: rand_8
	v0 := random 0b0111
	jump load_candidate

	: rand_4
	v0 := random 0b0011
	jump load_candidate

	: rand_2
	v0 := random 0b0001
	jump load_candidate

	: single_candidate
	# The list of empties only has one choice, so pull the first index
	v0 := 0

	: load_candidate
	i := empty_indexes
	i += v0
	load v0
	SPAWNED_TILE_INDEX := v0

	# spawn tiles at a value of either 2**0 (~7/8 odds) or 2**1 (~1/8 odds)
	v0 := random 0b111
	if v0 != 1 then v0 := 0

	i := board_data
	i += SPAWNED_TILE_INDEX
	save v0
}

:macro draw_tile_background _x _y { # Clobbers: vf, i
	:assert "This macro is dummy thicc and should be replaced by a callable function if used more than once" { CALLS == 0 }
	:assert "This macro clobbers the carry register, do not use it for input" { ( _x != vf ) & ( _y != vf ) }
	_x -= 1
	_y -= 1
	
	i := sprite_block_8
	sprite _x _y 7
	
	_x += 8
	i := sprite_block_3
	sprite _x _y 7

	#restore previous values
	_x -= 7
	_y += 1
}

:macro draw_digit _digit _x _y { # Clobbers: vf, i
	i := hex _digit
	sprite _x _y 5
}

:macro draw_tile _value _index { # In: SPAWNED_TILE_INDEX, Clobbers: v0-3, vf, i
	:assert "This macro is dummy thicc and should be replaced by a callable function if used more than once" { CALLS == 0 }
	:assert "This macro clobbers registers v0-3, use higher registers for input" { ( _value > v3 ) & ( _index > v3 ) }
	:assert "This macro clobbers the carry register, do not use it for input" { ( _value != vf ) & ( _index != vf ) }

	# Convert the tile value to display value
	# Our tile value is treated as an exponent for a power of 2 and displayed as a hex digit followed by a count of 0 digits:
	# 2^value = hex value = displayed digits
	# 2^+0 = 0x001 = 10
	# 2^+1 = 0x002 = 20
	# 2^+2 = 0x004 = 40
	# 2^+3 = 0x008 = 80
	# 2^+4 = 0x010 = 11
	# 2^+5 = 0x020 = 21
	# 2^+6 = 0x040 = 41
	# 2^+7 = 0x080 = 81
	# 2^+8 = 0x100 = 12
	# 2^+9 = 0x200 = 22
	# 2^10 = 0x400 = 42
	# 2^11 = 0x800 = 82

	# get the two least significant bits as these determine our hex digit (1, 2, 4, or 8)
	get_crumb v0 _value

	# at this point v3 is a value from 0-3 but we want a value of 1, 2, 4, or 8. We can use pow(2, v3) to get the right value
	i := pow_2_table
	i += v0
	load v0
	:alias HEX_DIGIT v2
	HEX_DIGIT := v0

	# shifting the value right twice will give us the number of 0 digits with no further calculation needed
	:alias ZEROS_DIGIT v3
	shift_crumb ZEROS_DIGIT _value

	# multiply the index by two to use for the coordinate lookup
	v0 := _index
	v0 <<= v0
	
	i := tile_coordinates
	i += v0
	load v1
	:alias SPRITE_X v0
	:alias SPRITE_Y v1

	if _index != SPAWNED_TILE_INDEX then jump done_background
	draw_tile_background SPRITE_X SPRITE_Y	
	: done_background

	draw_digit HEX_DIGIT SPRITE_X SPRITE_Y
	SPRITE_X += 5
	draw_digit ZEROS_DIGIT SPRITE_X SPRITE_Y
}

:macro draw_banner { # Clobbers: v0, vf, i
	i := sprite_block_8
	v0 := 0
	draw_column

	v0 := 56
	draw_column
}

:macro draw_victory_banner { # Clobbers: v0, vf, i
	i := sprite_numeral_2_6
	v0 := 0
	vf := 0
	sprite vf v0 8
	vf := 56
	sprite vf v0 8

	i := sprite_numeral_0_6
	v0 := 8
	vf := 0
	sprite vf v0 8
	vf := 56
	sprite vf v0 8

	i := sprite_numeral_4_6
	v0 := 16
	vf := 0
	sprite vf v0 8
	vf := 56
	sprite vf v0 8

	i := sprite_numeral_8_6
	v0 := 24
	vf := 0
	sprite vf v0 8
	vf := 56
	sprite vf v0 8
}

:macro draw_board { # Clobbers: v0-4, vf, i
	:assert "This macro is dummy thicc and should be replaced by a callable function if used more than once" { CALLS == 0 }
	# wait until the specified delay since the last frame was drawn
	loop
		vf := delay
		if vf != 0 then
	again

	clear

	if GAME_STATE == VICTORY then jump victory_banner

	draw_banner
	jump done_banner
	
	: victory_banner
	draw_victory_banner

	: done_banner
	# Loop over board
	# when a non-empty space is found, draw the current value
	:alias INDEX v4
	INDEX := 0
	loop
		i := board_data
		i += INDEX

		:alias VALUE v5
		load v0
		VALUE := v0

		if VALUE == EMPTY_TILE then jump draw_board_next
		
		draw_tile VALUE INDEX

		: draw_board_next
		INDEX += 1
		if INDEX != 16 then
	again

	# cap framerate at 20 fps
	vf := 3
	delay := vf
}

:macro buzz { # Clobbers: vf
	vf := 4
	buzzer := vf
}

:macro get_input { # Out: DIRECTION; Clobbers: vf
	:assert "This macro is dummy thicc and should be replaced by a callable function if used more than once" { CALLS == 0 }
	:const DIR_NONE -1
	DIRECTION := DIR_NONE
	
	loop
		# Block till a key is pressed, game state only advances when the player makes a valid move
		vf := key

		if vf == OCTO_KEY_W then DIRECTION := DIR_UP

		if vf == OCTO_KEY_A then DIRECTION := DIR_LEFT

		if vf == OCTO_KEY_S then DIRECTION := DIR_DOWN

		if vf == OCTO_KEY_D then DIRECTION := DIR_RIGHT

		while DIRECTION == DIR_NONE
		# An invalid key was pressed, trigger the buzzer and wait for a new key press
		buzz
	again
}

:macro multiply_by_four _target { # In/Out: _target; Clobbers: vf
	:assert "Cannot multiply the carry register, the result will be clobbered" { _target != vf }
	_target <<= _target
	_target <<= _target
}

:macro resolve_collision _target {
	:assert "Collision resolution is only applicable for registers 0-2" { _target < v3 }
	_target += 1
	if _target == 11 then GAME_STATE := VICTORY # 2^11 is 2048
}

:macro process_tiles { # In: v0-3
	# v0, v1, v2, v3 contain a collection of tiles that are treated as moving toward v0
	#  (the caller will map from/to the actual saved order)

	# move tiles to the leftmost edge
	if v2 == EMPTY_TILE then slide_onto_v2
	if v1 == EMPTY_TILE then slide_onto_v1
	if v0 == EMPTY_TILE then slide_onto_v0

	# shifted everything to the left, so check for collisions
	if v0 == EMPTY_TILE then jump done_processing
	if v0 != v1 then jump check_v1
	# collision between v0 and v1
	resolve_collision v0
	slide_onto_v1
	: check_v1
	if v1 == EMPTY_TILE then jump done_processing
	if v1 != v2 then jump check_v2
	#collision between v1 and v2
	resolve_collision v1
	slide_onto_v2
	: check_v2
	if v2 == EMPTY_TILE then jump done_processing
	if v2 != v3 then jump done_processing
	# collision between v2 and v3
	resolve_collision v2
	slide_onto_v3
	: done_processing
}

:macro move_board { # In: DIRECTION; Out: GAME_STATE; Clobbers: v0-v7, vf, i
	:alias LOOP_COUNTER v4
	LOOP_COUNTER := 0

	:alias IS_REVERSED v5
	IS_REVERSED := FLAG_DIR_REVERSED
	IS_REVERSED &= DIRECTION

	:alias IS_COLUMN v6
	IS_COLUMN := FLAG_DIR_COLUMN
	IS_COLUMN &= DIRECTION

	: move_loop
		:alias LOAD_OFFSET v7
		LOAD_OFFSET := LOOP_COUNTER

		if IS_COLUMN == FLAG_DIR_COLUMN then jump load_column

		# load_row
		multiply_by_four LOAD_OFFSET
		
		i := board_data
		i += LOAD_OFFSET
		load v3 # load the current values for TILE_0 to TILE_3
		jump end_load
		
		: load_column
		:const STRIDE 4
		i := board_data
		i += LOAD_OFFSET
		load v0
		v3 := v0

		LOAD_OFFSET += STRIDE
		i := board_data
		i += LOAD_OFFSET
		load v0
		v2 := v0

		LOAD_OFFSET += STRIDE
		i := board_data
		i += LOAD_OFFSET
		load v0
		v1 := v0

		LOAD_OFFSET += STRIDE
		i := board_data
		i += LOAD_OFFSET
		load v0
		: end_load

		if IS_REVERSED == FLAG_DIR_REVERSED then reverse
		
		process_tiles
		
		if IS_REVERSED == FLAG_DIR_REVERSED then reverse

		if IS_COLUMN == FLAG_DIR_COLUMN then jump save_column

		# save_row
		i := board_data
		i += LOAD_OFFSET
		save v3 # save the new values for TILE_0 to TILE_3
		jump end_save

		: save_column
		i := board_data
		i += LOAD_OFFSET
		save v0

		LOAD_OFFSET -= STRIDE
		i := board_data
		i += LOAD_OFFSET
		v0 := v1
		save v0

		LOAD_OFFSET -= STRIDE
		i := board_data
		i += LOAD_OFFSET
		v0 := v2
		save v0

		LOAD_OFFSET -= STRIDE
		i := board_data
		i += LOAD_OFFSET
		v0 := v3
		save v0
		: end_save
		
		LOOP_COUNTER += 1
		if LOOP_COUNTER != 4 then jump move_loop
	jump game_loop
}

:macro draw_lose_banner { # Clobbers: v0, vf, i
	v0 := 0
	i := sprite_letter_g_6
	vf := 0
	sprite v0 vf 8
	i := sprite_letter_a_6
	vf := 8
	sprite v0 vf 8
	i := sprite_letter_m_6
	vf := 16
	sprite v0 vf 8
	i := sprite_letter_e_6
	vf := 24
	sprite v0 vf 8

	v0 := 56
	i := sprite_letter_o_6
	vf := 0
	sprite v0 vf 8
	i := sprite_letter_v_6
	vf := 8
	sprite v0 vf 8
	i := sprite_letter_e_6
	vf := 16
	sprite v0 vf 8
	i := sprite_letter_r_6
	vf := 24
	sprite v0 vf 8
}

############################
# Main/Game Loop
############################
: main
	# clear board_data
	v0 := EMPTY_TILE
	v1 := 0
	loop
		i := board_data
		i += v1
		save v0
		v1 += 1
		if v1 != 16 then
	again

	GAME_STATE := 0

	: game_loop
		spawn_tile # spawn_tile will jump to game_end if it can't find a free space

		draw_board

		get_input

		move_board
	# move_board jumps to game_loop

	# No free spaces for tiles, restart the game
	: game_end
	if GAME_STATE == VICTORY then jump done_lose_banner
	draw_lose_banner
	: done_lose_banner
	buzz
	vf := key
jump main

:macro swap _a _b { # Clobbers: vf
	:assert "Swapping a register with itself is a useless operation" { _a != _b }
	:assert "Using the carry register as operand _a in a swap will clobber it with the value from _b" { _a != vf }
	:assert "Using the carry register as operand _b in a swap will clobber it with the value from _a" { _b != vf }
	vf := _a
	_a := _b
	_b := vf
}

: reverse # In: v0-3; Clobbers: vf
	swap v0 v3
	swap v1 v2
return

: slide_onto_v0 # ARGS: v0-3; UNUSED: v4-f
	v0 := v1
: slide_onto_v1 # ARGS: v1-3; UNUSED: v0, v4-f
	v1 := v2
: slide_onto_v2 # ARGS: v2-3; UNUSED: v0-1, v4-f
	v2 := v3
: slide_onto_v3 # ARGS: v3; UNUSED: v0-2, v4-f
	v3 := EMPTY_TILE
return

: draw_column # In: v0, i; Clobbers: vf
	# Draws the first 8 rows of the sprite pointed to by i from the top to the bottom of the screen (so repeated 4 times)
	#  using v0 as the x-coord
	vf := 0
	sprite v0 vf 8
	vf := 8
	sprite v0 vf 8
	vf := 16
	sprite v0 vf 8
	vf := 24
	sprite v0 vf 8
return

: sprite_block_8
	0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF # a solid block (8x8 pixels)
: sprite_block_3
	0xE0 0xE0 0xE0 0xE0 0xE0 0xE0 0xE0 0xE0 # a 3 wide block (8x3 pixels)
#: sprite_checker_8
#	0x55 0xAA 0x55 0xAA 0x55 0xAA 0x55 0xAA
: sprite_numeral_0_6
	0x00 0x7C 0x7E 0x66 0x66 0x7E 0x3E #0x00
: sprite_numeral_2_6
	0x00 0x3C 0x46 0x0C 0x18 0x30 0x7E #0x00
: sprite_numeral_4_6
	0x00 0x64 0x66 0x7E 0x3E 0x06 0x06 #0x00
: sprite_numeral_8_6
	0x00 0x7C 0x66 0x7E 0x66 0x66 0x3E #0x00
: sprite_letter_a_6
	0x00 0x3C 0x66 0x66 0x7E 0x66 0x62 #0x00
: sprite_letter_e_6
	0x00 0x3C 0x60 0x78 0x60 0x60 0x3C #0x00
: sprite_letter_g_6
	0x00 0x3C 0x72 0x60 0x66 0x72 0x3C #0x00
: sprite_letter_m_6
	0x00 0x62 0x76 0x7E 0x6A 0x62 0x62 #0x00
: sprite_letter_o_6
	0x00 0x3C 0x76 0x62 0x62 0x76 0x3C #0x00
: sprite_letter_r_6
	0x00 0x7C 0x62 0x62 0x7C 0x66 0x62 #0x00
: sprite_letter_v_6
	0x00 0x42 0x62 0x66 0x34 0x3C 0x18 0x00

: pow_2_table
	1 2 4 8 # 2**0, 2**1, 2**2, 2**3 - used by the draw_tile routine

	# Tiles are 11 pixels wide and 7 pixels high, digits are using the default 4x5 font
	# 0123456789A
	# 1#  # ####
	# 2#  # #  #
	# 3#### #  #
	# 4   # #  #
	# 5   # ####
	# 6
	#
	# The game board is centered on the screen, leaving a 2 pixel border around it and an additional 8 pixel gutter on the left and right sides of the screen
: tile_coordinates
	# store the precalculated x/y coordinate pairs for the top left corner of a tile based on the index.
	# lookups will multiply by 2 given the coordinates take up two bytes
	0x0B 0x02 0x16 0x02 0x21 0x02 0x2C 0x02
	0x0B 0x09 0x16 0x09 0x21 0x09 0x2C 0x09
	0x0B 0x10 0x16 0x10 0x21 0x10 0x2C 0x10
	0x0B 0x17 0x16 0x17 0x21 0x17 0x2C 0x17
	# This data was calculated with the following stringmode definition:
	#:stringmode tile_coords "0123456789ABCDEF" {
		## x coordinate is left gutter + left border + (tile width * the low crumb of the index) + a one pixel offset as we're drawing the numbers only most of the time
		#:byte { 8 + 2 + ( 11 * ( VALUE & 0b11 ) ) + 1 }

		## y coordinate is top border + (tile height * bits 2-3 of the index) + a one pixel offset again because drawing the numbers is the common case
		#:byte { 2 + ( 7 * ( VALUE >> 2 ) ) }
	#}
	#tile_coords "0123456789ABCDEF"

: board_data # This data gets initialised to EMPTY_TILE at runtime
	0xCC 0x77 0xCC 0x77
	0xCC 0x77 0xCC 0x77
	0xCC 0x77 0xCC 0x77
	0xCC 0x77 0xCC 0x77
:monitor board_data "%i, %i, %i, %i\n%i, %i, %i, %i\n%i, %i, %i, %i\n%i, %i, %i, %i\n"

: empty_indexes
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
